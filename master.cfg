# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import os

import creds
# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = []

# ARM Builders
c['workers'].append(worker.Worker("hydrogen", creds.hydrogen, max_builds=1))
c['workers'].append(worker.Worker("helium", creds.helium, max_builds=1))
c['workers'].append(worker.Worker("lithium", creds.lithium, max_builds=1))
c['workers'].append(worker.Worker("beryllium", creds.beryllium, max_builds=1))
c['workers'].append(worker.Worker("boron", creds.boron, max_builds=1))


# Intel Builders
c['workers'].append(worker.Worker("dasher", creds.dasher))
c['workers'].append(worker.Worker("dancer", creds.dancer))

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/rohbotics/pifi.git',
        workdir='gitpoller-pifi', only_tags=True,
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/ubiquity_motor-release.git',
        workdir='gitpoller-ubiquity-motor', branch='debian/kinetic/xenial/ubiquity_motor',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/raspicam_node-release.git',
        workdir='gitpoller-raspicam', branch='debian/kinetic/xenial/raspicam_node',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/move_basic-release.git',
        workdir='gitpoller-move_basic', branch='debian/kinetic/xenial/move_basic',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/magni_robot-release.git',
        workdir='gitpoller-magni_robot', branch='debian/kinetic/xenial/magni_robot',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/loki_base_node-release.git',
        workdir='gitpoller-loki_base_node', branch='master',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/loki_robot-release.git',
        workdir='gitpoller-loki_robot', branch='master',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/fiducials-release.git',
        workdir='gitpoller-fiducials', branch='master',
        pollinterval=300))
c['change_source'].append(changes.GitPoller(
        'https://github.com/UbiquityRobotics-release/dnn_detect-release.git',
        workdir='gitpoller-dnn_detect', branch='master',
        pollinterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.Triggerable(
                            name="pi-compress-image",
                            builderNames=["pi-compress-image"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="pifi",
                            change_filter=util.ChangeFilter(repository='https://github.com/rohbotics/pifi.git'),
                            treeStableTimer=60*2,
                            builderNames=["pifi"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="ubiquity_motor",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/ubiquity_motor-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kubiquity_motor__armhf__bpo", "Kubiquity_motor__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="raspicam_node",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/raspicam_node-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kraspicam_node__armhf__deb"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="move_basic",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/move_basic-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kmove_basic__armhf__bpo", "Kmove_basic__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="magni_robot",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/magni_robot-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kmagni_robot__armhf__bpo", "Kmagni_robot__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="loki_base_node",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/loki_base_node-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kloki_base_node__armhf__bpo", "Kloki_base_node__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="loki_robot",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/loki_robot-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kloki_robot__armhf__bpo", "Kloki_robot__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="fiducials",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/fiducials-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kfiducials__armhf__bpo", "Kfiducials__amd64__bpo"]))
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="dnn_detect",
                            change_filter=util.ChangeFilter(repository='https://github.com/UbiquityRobotics-release/dnn_detect-release.git'),
                            treeStableTimer=60*2,
                            builderNames=["Kdnn_detect__armhf__bpo", "Kdnn_detect__amd64__bpo"]))
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

ubiquity_lxde = util.BuildFactory()
ubiquity_lxde.addStep(steps.Git(repourl='https://github.com/rohbotics/ubuntu-pi-flavor-maker.git', mode='incremental'))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["./link-settings.sh", "ubiquity-lxde"], name="Link Settings", descriptionDone="Linked Settings"))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "./build-umount.sh"], description="Clean Unmount", name="Run Unmount Script",flunkOnFailure=False))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "rm", "-rf", "/image-builds/PiFlavourMaker/xenial/base"], description="Clean", name="Remove Old Stuff"))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "./build-image.sh"], description="Building", name="Run Build Script"))
ubiquity_lxde.addStep(steps.SetPropertyFromCommand(command="cat latest_image", property="latest_image_path", haltOnFailure=True))
ubiquity_lxde.addStep(steps.Trigger(schedulerNames=['pi-compress-image'],
                        waitForFinish=False,
                        updateSourceStamp=True,
                        set_properties={ 'latest_image_path' : util.Property('latest_image_path'), 'prev_worker' : util.Property('workername') }))


compress_image = util.BuildFactory()
compress_image.addStep(steps.ShellCommand(command= ["rm", "-rf", "*.img", "*.img*"], description="Clean", name="Remove Old Stuff"))
compress_image.addStep(steps.ShellCommand(name="Copy Image File", timeout=2400, haltOnFailure=True,
                                           command=util.Interpolate('scp ubuntu@%s.builders.ubiquityrobotics.com:%s .', 
                                                   util.Property('prev_worker'), util.Property('latest_image_path'))))
image_file = util.Transform(os.path.basename, util.Property('latest_image_path'))
compress_image.addStep(steps.ShellCommand(name="Compress Image File", timeout=3600,
                       command=util.Interpolate('xz %s', image_file)))
compress_image.addStep(steps.ShellCommand(name="Checksum", 
                       command=util.Interpolate('sha256sum %s.xz | awk "{print $1}" > %s.xz.sha256', image_file, image_file)))
compressed_image_file = util.Interpolate('%s.xz', image_file)
compressed_image_hash = util.Interpolate('%s.sha256', compressed_image_file)
compress_image.addStep(steps.FileUpload(name="Upload Image", workersrc=compressed_image_file, masterdest=compressed_image_file))
compress_image.addStep(steps.FileUpload(name="Upload Image Hash", workersrc=compressed_image_hash, masterdest=compressed_image_hash))

def set_deb_properties(name, factory, arch, is_ros=False):
    factory.addStep(steps.SetPropertyFromCommand(command="dpkg-parsechangelog --show-field Version", 
        property="deb_version", haltOnFailure=True))

    # the Debian name has dashes instead of underscores
    debian_name = "-".join(name.split("_"))

    if is_ros:
        factory.addStep(steps.SetProperty(property="deb_path", 
            value=util.Interpolate("/var/cache/pbuilder/result/xenial/ros-kinetic-" + debian_name + "_%(prop:deb_version)s_" + arch +".deb")))
        factory.addStep(steps.SetProperty(property="dsc_path", 
        value=util.Interpolate("../ros-kinetic-" + debian_name + "_%(prop:deb_version)s.dsc")))
    else:
        factory.addStep(steps.SetProperty(property="deb_path", 
            value=util.Interpolate("/var/cache/pbuilder/result/xenial/" + debian_name + "_%(prop:deb_version)s_" + arch +".deb")))  
        factory.addStep(steps.SetProperty(property="dsc_path", 
        value=util.Interpolate("../" + debian_name + "_%(prop:deb_version)s.dsc")))
def cowbuilder(arch, factory):
    factory.addStep(steps.FileDownload(mastersrc="xenial-cowbuilder-%s" % arch, workerdest="xenial-cowbuilder"))
    factory.addStep(steps.ShellCommand(command=['sudo', 'cowbuilder', '--configfile', 
        'xenial-cowbuilder', '--update'], description="Update Cowbuilder"))
    factory.addStep(steps.ShellCommand(command=['sudo', 'cowbuilder', '--configfile', 
        'xenial-cowbuilder', '--build', util.Property('dsc_path')], description="Build Deb"))

def aptly(name, factory):
    aptly_url = 'http://aptly.ubiquityrobotics.com:8000/'

    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'POST', '-F', util.Interpolate('file=@%(prop:deb_path)s'), 
        aptly_url + 'api/files/' + name], description="Upload Deb"))
    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'POST',
        aptly_url +'api/repos/main-building/file/' + name], description="Upload Deb"))
    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'PUT',
        aptly_url + 'api/publish/filesystem:www:building/xenial',
        '-H', "Content-Type: application/json", '--data', "{}"], description="Publish Deb"))
    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'POST', '-F', util.Interpolate('file=@%(prop:deb_path)s'), 
        aptly_url + 'api/files/' + name], description="Upload Deb"))
    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'POST',
        aptly_url +'api/repos/main-testing/file/' + name], description="Upload Deb"))
    factory.addStep(steps.ShellCommand(command=['curl', '-X', 'PUT',
        aptly_url + 'api/publish/filesystem:www:ubiquity-testing/xenial',
        '-H', "Content-Type: application/json", '--data', "{}"], description="Publish Deb"))



def single_ros_deb(name, release_repo, arch, factory):
    factory.addStep(steps.Git(repourl=release_repo,
                                     branch='debian/kinetic/xenial/%s' % name, method='clobber', mode='full', alwaysUseLatest=True))
    factory.addStep(steps.ShellCommand(command=['gbp', 'buildpackage', '-S', '-us', '-uc', '--git-ignore-new', '--git-ignore-branch'],
                                              description="Generate Source Deb", haltOnFailure=True))
    set_deb_properties(name, factory, arch, is_ros=True)
    cowbuilder(arch, factory)
    aptly(name, factory)


def single_ros_backport_deb(name, release_repo, arch, factory):
    aptly_url = 'http://aptly.ubiquityrobotics.com:8000'

    factory.addStep(steps.Git(repourl=release_repo,
                                     branch='debian/kinetic/xenial/%s' % name, method='clobber', mode='full', alwaysUseLatest=True))
    factory.addStep(steps.ShellCommand(command=['dch','--local','~tbpo','--distribution','xenial',"Temp Backport"],
                                              description="Bump to backport version", haltOnFailure=True))
    factory.addStep(steps.ShellCommand(command=['gbp', 'buildpackage', '-S', '-us', '-uc', '--git-ignore-new', '--git-ignore-branch'],
                                              description="Generate Source Deb", haltOnFailure=True))
    set_deb_properties(name, factory, arch, is_ros=True)
    cowbuilder(arch, factory)
    aptly(name, factory)

def metapackage_ros_backport_deb(name, packages, release_repo, arch, factory):
    # TODO Topological sort
    for package in packages:
        single_ros_backport_deb(package, release_repo, arch, factory)

pifi_deb = util.BuildFactory()
pifi_deb.addStep(steps.Git(repourl='https://github.com/rohbotics/pifi.git', mode='full', getDescription={'abbrev':0}))
pifi_deb.addStep(steps.ShellCommand(command=['git', 'checkout', util.Property('commit-description')], description="Checkout Latest Tag"))
pifi_deb.addStep(steps.ShellCommand(command=['debuild', '-S', '-us', '-uc'], description="Generate Source Deb"))
pifi_deb.addStep(steps.FileDownload(mastersrc="~/xenial-cowbuilder", workerdest="xenial-cowbuilder"))
pifi_deb.addStep(steps.SetPropertyFromCommand(command="ls -Art ../pifi*.dsc | tail -n 1", property="dsc_path", haltOnFailure=True))
pifi_deb.addStep(steps.ShellCommand(command=['sudo', 'cowbuilder', '--configfile', 'xenial-cowbuilder-armhf', '--build', util.Property('dsc_path')],
                                    description="Build Deb"))
pifi_deb.addStep(steps.SetPropertyFromCommand(command="ls -Art /var/cache/pbuilder/result/xenial/pifi*.deb | tail -n 1", property="deb_path", haltOnFailure=True))
pifi_deb.addStep(steps.ShellCommand(command=['curl', '-X', 'POST', '-F', util.Interpolate('file=@%s', util.Property('deb_path')), 
        'http://aptly.ubiquityrobotics.com:8000/api/files/pifi'], description="Upload Deb"))
pifi_deb.addStep(steps.ShellCommand(command=['curl', '-X', 'POST',
        'http://aptly.ubiquityrobotics.com:8000/api/repos/ubiquity-main/file/pifi'], description="Upload Deb"))
pifi_deb.addStep(steps.ShellCommand(command=['curl', '-X', 'PUT',
        'http://aptly.ubiquityrobotics.com:8000/api/publish/filesystem:www:building/xenial',
        '-H', "Content-Type: application/json", '--data', "{}"], description="Publish Deb"))

Kubiquity_motor__armhf__bpo = util.BuildFactory()
single_ros_backport_deb('ubiquity_motor', 
    'https://github.com/UbiquityRobotics-release/ubiquity_motor-release.git', 'armhf', Kubiquity_motor__armhf__bpo)
Kubiquity_motor__amd64__bpo = util.BuildFactory()
single_ros_backport_deb('ubiquity_motor', 
    'https://github.com/UbiquityRobotics-release/ubiquity_motor-release.git', 'amd64', Kubiquity_motor__amd64__bpo)

Kraspicam_node__armhf__deb = util.BuildFactory()
single_ros_deb('raspicam_node',
    'https://github.com/UbiquityRobotics-release/raspicam_node-release.git', 'armhf', Kraspicam_node__armhf__deb)

Kmove_basic__armhf__bpo = util.BuildFactory()
single_ros_backport_deb('move_basic',
    'https://github.com/UbiquityRobotics-release/move_basic-release.git', 'armhf', Kmove_basic__armhf__bpo)
Kmove_basic__amd64__bpo = util.BuildFactory()
single_ros_backport_deb('move_basic',
    'https://github.com/UbiquityRobotics-release/move_basic-release.git', 'amd64', Kmove_basic__amd64__bpo)

Kloki_base_node__armhf__bpo = util.BuildFactory()
single_ros_backport_deb('loki_base_node',
    'https://github.com/UbiquityRobotics-release/loki_base_node-release.git', 'armhf', Kloki_base_node__armhf__bpo)
Kloki_base_node__amd64__bpo = util.BuildFactory()
single_ros_backport_deb('loki_base_node',
    'https://github.com/UbiquityRobotics-release/loki_base_node-release.git', 'amd64', Kloki_base_node__amd64__bpo)

Kmagni_robot__armhf__bpo = util.BuildFactory()
metapackage_ros_backport_deb('magni_robot', 
    ['magni_description', 'magni_bringup', 'magni_teleop', 'magni_nav', 'magni_demos', 'magni_robot'],
    'https://github.com/UbiquityRobotics-release/magni_robot-release.git', 'armhf', Kmagni_robot__armhf__bpo)
Kmagni_robot__amd64__bpo = util.BuildFactory()
metapackage_ros_backport_deb('magni_robot', 
    ['magni_description', 'magni_bringup', 'magni_teleop', 'magni_nav', 'magni_demos', 'magni_robot'],
    'https://github.com/UbiquityRobotics-release/magni_robot-release.git', 'amd64', Kmagni_robot__amd64__bpo)

Kloki_robot__armhf__bpo = util.BuildFactory()
metapackage_ros_backport_deb('loki_robot', 
    ['loki_description', 'loki_bringup', 'loki_teleop', 'loki_nav', 'loki_demos', 'loki_robot'],
    'https://github.com/UbiquityRobotics-release/loki_robot-release.git', 'armhf', Kloki_robot__armhf__bpo)
Kloki_robot__amd64__bpo = util.BuildFactory()
metapackage_ros_backport_deb('loki_robot', 
    ['loki_description', 'loki_bringup', 'loki_teleop', 'loki_nav', 'loki_demos', 'loki_robot'],
    'https://github.com/UbiquityRobotics-release/loki_robot-release.git', 'amd64', Kloki_robot__amd64__bpo)

Kfiducials__armhf__bpo = util.BuildFactory()
metapackage_ros_backport_deb('fiducials', 
    ['fiducial_msgs', 'aruco_detect', 'fiducial_slam', 'fiducials'],
    'https://github.com/UbiquityRobotics-release/fiducials-release.git', 'armhf', Kfiducials__armhf__bpo)
Kfiducials__amd64__bpo = util.BuildFactory()
metapackage_ros_backport_deb('fiducials', 
    ['fiducial_msgs', 'aruco_detect', 'fiducial_slam', 'fiducials'],
    'https://github.com/UbiquityRobotics-release/fiducials-release.git', 'amd64', Kfiducials__amd64__bpo)

Kdnn_detect__armhf__bpo = util.BuildFactory()
single_ros_backport_deb('dnn_detect',
    'https://github.com/UbiquityRobotics-release/dnn_detect-release.git', 'armhf', Kdnn_detect__armhf__bpo)
Kdnn_detect__amd64__bpo = util.BuildFactory()
single_ros_backport_deb('dnn_detect',
    'https://github.com/UbiquityRobotics-release/dnn_detect-release.git', 'amd64', Kdnn_detect__amd64__bpo)

armhf_workers = ["hydrogen", "helium", "lithium", "beryllium", "boron"]
amd64_workers = ["dasher", "dancer"]

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="pi-lxde-image",
      workernames=["hydrogen"],
      factory=ubiquity_lxde))
c['builders'].append(
    util.BuilderConfig(name="pi-compress-image",
      workernames=amd64_workers,
      factory=compress_image))
c['builders'].append(
    util.BuilderConfig(name="pifi",
      workernames=armhf_workers,
      factory=pifi_deb))

c['builders'].append(
    util.BuilderConfig(name="Kubiquity_motor__armhf__bpo",
      workernames=armhf_workers,
      factory=Kubiquity_motor__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kraspicam_node__armhf__deb",
      workernames=armhf_workers,
      factory=Kraspicam_node__armhf__deb))
c['builders'].append(
    util.BuilderConfig(name="Kmove_basic__armhf__bpo",
      workernames=armhf_workers,
      factory=Kmove_basic__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kloki_base_node__armhf__bpo",
      workernames=armhf_workers,
      factory=Kloki_base_node__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kmagni_robot__armhf__bpo",
      workernames=armhf_workers,
      factory=Kmagni_robot__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kloki_robot__armhf__bpo",
      workernames=armhf_workers,
      factory=Kloki_robot__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kfiducials__armhf__bpo",
      workernames=armhf_workers,
      factory=Kfiducials__armhf__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kdnn_detect__armhf__bpo",
      workernames=armhf_workers,
      factory=Kdnn_detect__armhf__bpo))

c['builders'].append(
    util.BuilderConfig(name="Kubiquity_motor__amd64__bpo",
      workernames=amd64_workers,
      factory=Kubiquity_motor__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kmove_basic__amd64__bpo",
      workernames=amd64_workers,
      factory=Kmove_basic__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kloki_base_node__amd64__bpo",
      workernames=amd64_workers,
      factory=Kloki_base_node__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kmagni_robot__amd64__bpo",
      workernames=amd64_workers,
      factory=Kmagni_robot__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kloki_robot__amd64__bpo",
      workernames=amd64_workers,
      factory=Kloki_robot__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kfiducials__amd64__bpo",
      workernames=amd64_workers,
      factory=Kfiducials__amd64__bpo))
c['builders'].append(
    util.BuilderConfig(name="Kdnn_detect__amd64__bpo",
      workernames=amd64_workers,
      factory=Kdnn_detect__amd64__bpo))

allbuilderNames = []
for builder in c['builders']:
    allbuilderNames.append(builder.name)

c['schedulers'].append(schedulers.ForceScheduler(name="force",builderNames=allbuilderNames))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []


mn = reporters.MailNotifier(fromaddr="buildbot@ubiquityrobotics.com",
                            sendToInterestedUsers=False,
                            extraRecipients=["ra@ubiquityrobotics.com"],
                            useTls=True, relayhost="mail.ubiquityrobotics.com",
                            smtpPort=587, smtpUser="buildbot@ubiquityrobotics.com",
                            smtpPassword=creds.stmp)
c['services'].append(mn)
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Ubiquity Robotics"
c['titleURL'] = "ubiquityrobotics.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://build.ubiquityrobotics.com/"


authz = util.Authz(
  allowRules=[
    util.AnyEndpointMatcher(role="UbiquityRobotics"),
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)


c['www'] = {'port': 8010,
            'plugins': dict(waterfall_view={}, console_view={}, grid_view={}),
            'auth': util.GitHubAuth(creds.GithubId, creds.GithubSecret),
            'authz': authz
           }
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

