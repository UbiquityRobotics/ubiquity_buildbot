# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

from get_creds import creds
import workers
from ubiquity_buildsteps import *

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# We define all the workers in workers.py
c['workers'] = workers.workers

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

c['change_source'] = []
c['builders'] = []
c['schedulers'] = []

kinetic_ros_packages = [
    {
        'name': 'ubiquity_motor',
        'url': 'https://github.com/UbiquityRobotics-release/ubiquity_motor-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo'
    },
    {
        'name': 'raspicam_node',
        'url': 'https://github.com/UbiquityRobotics-release/raspicam_node-release.git',
        'arches': ['armhf'],
        'type': 'deb'
    },
    {
        'name': 'move_basic',
        'url': 'https://github.com/UbiquityRobotics-release/move_basic-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo'
    },
    {
        'name': 'loki_base_node',
        'url': 'https://github.com/UbiquityRobotics-release/loki_base_node-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo'
    },
    {
        'name': 'magni_robot',
        'url': 'https://github.com/UbiquityRobotics-release/magni_robot-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo',
        'packages': ['magni_description', 'magni_bringup', 'magni_teleop', 'magni_nav', 'magni_demos', 'magni_robot']
    },
    {
        'name': 'loki_robot',
        'url': 'https://github.com/UbiquityRobotics-release/loki_robot-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo',
        'packages': ['loki_description', 'loki_bringup', 'loki_teleop', 'loki_nav', 'loki_demos', 'loki_robot']
    },
    {
        'name': 'fiducials',
        'url': 'https://github.com/UbiquityRobotics-release/fiducials-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo',
        'packages': ['fiducial_msgs', 'aruco_detect', 'fiducial_slam', 'fiducials']
    },
    {
        'name': 'dnn_detect',
        'url': 'https://github.com/UbiquityRobotics-release/dnn_detect-release.git',
        'arches': ['armhf', 'amd64', 'arm64'],
        'type': 'bpo'
    },
    {
        'name': 'pi_sonar',
        'url': 'https://github.com/UbiquityRobotics-release/pi_sonar-release.git',
        'arches': ['armhf'],
        'type': 'bpo'
    }
]

for package in kinetic_ros_packages:
    c['change_source'].append(changes.GitPoller(
            package['url'],
            workdir='/buildwork/gitpoller-' + package['name'],
            branch='debian/kinetic/xenial/' + package['name'],
            pollinterval=300
    ))

    builder_names = []

    for arch in package['arches']:
        factory = util.BuildFactory()
        if 'packages' not in package:
            if package['type'] == 'bpo':
                single_ros_backport_deb(package['name'], package['url'], arch, factory)
            elif package['type'] == 'deb':
                single_ros_deb(package['name'], package['url'], arch, factory)
        else:
            if package['type'] == 'bpo':
                metapackage_ros_backport_deb(package['name'], package['packages'], package['url'], arch, factory)
            elif package['type'] == 'deb':
                metapackage_ros_deb(package['name'], package['packages'], package['url'], arch, factory)

        builder_name = 'K{}__{}__{}'.format(package['name'], arch, package['type'])
        builder_names.append(builder_name)
        c['builders'].append(
            util.BuilderConfig(name=builder_name,
            workernames=workers.workers_for_arch[arch],
            factory=factory
        ))

    c['schedulers'].append(schedulers.SingleBranchScheduler(
            name=package['name'],
            change_filter=util.ChangeFilter(repository=package['url']),
            treeStableTimer=60*2,
            builderNames=builder_names
    ))



c['change_source'].append(changes.GitPoller(
        'https://github.com/rohbotics/pifi.git',
        workdir='/buildwork/gitpoller-pifi', only_tags=True,
        pollinterval=300))


####### SCHEDULERS

c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="pifi",
                            change_filter=util.ChangeFilter(repository='https://github.com/rohbotics/pifi.git'),
                            treeStableTimer=60*2,
                            builderNames=["pifi"]))
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

ubiquity_lxde = util.BuildFactory()
ubiquity_lxde.addStep(steps.Git(repourl='https://github.com/UbiquityRobotics/pi_image_build.git', mode='incremental'))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["./link-settings.sh", "ubiquity-lxde"], name="Link Settings", descriptionDone="Linked Settings"))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "./build-umount.sh"], description="Clean Unmount", name="Run Unmount Script",flunkOnFailure=False))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "rm", "-rf", "/image-builds/PiFlavourMaker/xenial/base"], description="Clean", name="Remove Old Stuff"))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "rm", "-rf", "/image-builds/final-images/*"], description="Clean", name="Remove Old Stuff"))
ubiquity_lxde.addStep(steps.ShellCommand(command= ["sudo", "./build-image.sh"], description="Building", name="Run Build Script", timeout=4000))
ubiquity_lxde.addStep(steps.SetPropertyFromCommand(command="cat latest_image", property="latest_image_path", haltOnFailure=True))
compressed_image_file = util.Interpolate('%s.xz', util.Property('latest_image_path'))
image_name = util.Transform(os.path.basename, util.Property('latest_image_path'))
compressed_image_name = util.Interpolate('%s.xz', image_name)
compressed_image_master_dest = util.Interpolate('/buildwork/%s.xz', image_name)

ubiquity_lxde.addStep(steps.FileUpload(name="Upload Image", workersrc=compressed_image_file, masterdest=compressed_image_master_dest))

c['builders'].append(
    util.BuilderConfig(name="pi-lxde-image",
      workernames=["boron"],
      factory=ubiquity_lxde))

pifi_deb = util.BuildFactory()
pifi_deb.addStep(steps.Git(repourl='https://github.com/rohbotics/pifi.git', mode='full', getDescription={'abbrev':0}))
pifi_deb.addStep(steps.ShellCommand(command=['git', 'checkout', util.Property('commit-description')], description="Checkout Latest Tag"))
pifi_deb.addStep(steps.ShellCommand(command=['debuild', '-S', '-us', '-uc'], description="Generate Source Deb"))
pifi_deb.addStep(steps.SetPropertyFromCommand(command="ls -Art ../pifi*.dsc | tail -n 1", property="dsc_path", haltOnFailure=True))
cowbuilder('armhf', pifi_deb)
pifi_deb.addStep(steps.SetPropertyFromCommand(command="ls -Art /var/cache/pbuilder/result/xenial/pifi*.deb | tail -n 1", property="deb_path", haltOnFailure=True))
aptly('pifi', pifi_deb)

c['builders'].append(
    util.BuilderConfig(name="pifi",
      workernames=workers.armhf_workers,
      factory=pifi_deb))

allbuilderNames = []
for builder in c['builders']:
    allbuilderNames.append(builder.name)

c['schedulers'].append(schedulers.ForceScheduler(name="force",builderNames=allbuilderNames))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []


mn = reporters.MailNotifier(fromaddr="buildbot@ubiquityrobotics.com",
                            sendToInterestedUsers=False,
                            extraRecipients=["ra@ubiquityrobotics.com"],
                            useTls=True, relayhost="mail.ubiquityrobotics.com",
                            smtpPort=587, smtpUser="buildbot@ubiquityrobotics.com",
                            smtpPassword=creds.stmp)
c['services'].append(mn)
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Ubiquity Robotics"
c['titleURL'] = "ubiquityrobotics.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "https://build.ubiquityrobotics.com/"


authz = util.Authz(
  allowRules=[
    util.AnyEndpointMatcher(role="UbiquityRobotics"),
  ],
  roleMatchers=[
    util.RolesFromGroups()
  ]
)


c['www'] = {'port': 8010,
            'plugins': dict(waterfall_view={}, console_view={}, grid_view={}),
            'auth': util.GitHubAuth(creds.GithubId, creds.GithubSecret),
            'authz': authz
           }
####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:////buildwork/state.sqlite",
}

