server {
    listen 80;
    listen [::]:80;
    server_name build.ubiquityrobotics.com;
    include /etc/nginx/snippets/letsencrypt-acme-challenge.conf;

    location / {
        return 301 https://$server_name$request_uri;
    }
}

server {
    # Enable SSL and http2
    listen 443 ssl http2 default_server;

    server_name build.ubiquityrobotics.com;

    root html;
    index index.html index.htm;

    ssl_certificate /etc/letsencrypt/live/build.ubiquityrobotics.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/build.ubiquityrobotics.com/privkey.pem;

    # put a one day session timeout for websockets to stay longer
    ssl_session_cache      shared:SSL:10m;
    ssl_session_timeout  1440m;

    include snippets/ssl-params-medium.conf;

    # force https
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";

    proxy_set_header HOST $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_set_header X-Forwarded-Server  $host;
    proxy_set_header X-Forwarded-Host  $host;

    # you could use / if you use domain based proxy instead of path based proxy
    location / {
        proxy_pass http://127.0.0.1:8010/;
    }
    location /sse/ {
        # proxy buffering will prevent sse to work
        proxy_buffering off;
        proxy_pass http://127.0.0.1:8010/sse/;
    }
    # required for websocket
    location /ws {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://127.0.0.1:8010/ws;
        # raise the proxy timeout for the websocket
        proxy_read_timeout 6000s;
    }
}

